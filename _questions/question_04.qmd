<!-- question-type: inclass -->
### Exercise 4: Improving the Listings by Region Plot

**(a).** Together with your peers, propose three changes you want to make to the plot in Exercise 1. Discuss the rationale behind each change and how it might improve the visualization.

**(b).** Work with your tutor to create an agreed upon list of changes to make to the plot. What steps do you need to take to make these improvements?

**(c).** Implement the changes suggested in the R.

<!-- BEGIN PROFILE:r-teaching-guide -->
::: {.content-visible when-profile="r-teaching-guide"}

::: {.teaching-block}

::: {.teaching-block-header}
Teaching Note
:::

::: {.teaching-block-body}

🎯 **Learning Objective** 
Students should:

- Critically evaluate and improve a basic bar plot using best practices in data visualization
- Implement proportional comparisons, reordering of categories, and audience-driven filtering
- Deepen their understanding of ggplot2 internals, especially `after_stat()` behavior in `geom_bar()`

✅   **Core Concepts to Highlight**

- Piping (`%>%`) allows students to chain together multiple steps in a clear, readable sequence
    - This is their first exposure — emphasize that it’s used to “pass” the result of one step into the next
    - Example: `housing %>% filter(...) %>% ggplot(...)` reads as a logical sequence of actions
- Filtering by dwelling type (e.g., "House") sharpens the message by reducing noise and focusing on a meaningful subset
- Reordering bars using fct_infreq() displays categories from most to least common, making comparisons intuitive
- Proportions on the y-axis improve interpretability, especially when raw counts vary in scale — but require extra care to calculate within geom_bar()
- `after_stat(count)` lets us access the default computed statistic (the count of rows)
- `after_stat(count) / sum(after_stat(count)`) computes the proportion of each bar relative to the entire set of visible bars, not the whole dataset — this line is non-obvious and worth unpacking live

💬 **Suggested In-Class Prompts** (if needed)


“What does filtering to Houses change about the story this plot tells?”

“Why might we want to show proportions instead of counts?”

“What would happen if we didn’t use after_stat() here? What warning might we see?”

“Does this plot make you think differently about which regions are most active?”

“When might we want to show counts instead of proportions?”

📌 **Common Misunderstandings**

- Misusing `stat = "identity"` in `geom_bar()` instead of working with the default stat (count) — in this context, we want `stat = "count"` (the default), then adjust the output with `after_stat()`
- Thinking `fct_infreq()` changes the data itself — it only affects display order, not values
- Forgetting that proportions are always relative to what’s visible — if you filter first, proportions refer to the filtered subset, not the full dataset
- Believing that adding many tweaks automatically improves a plot — remind students to justify each choice

:::

:::

:::
<!-- END PROFILE:r-teaching-guide -->

<!-- BEGIN PROFILE:r-solutions -->
::: {.content-visible when-profile="r-solutions" when-profile="r-teaching-guide"}

::: {.solution-block}

::: {.solution-block-header}
Solution
:::

::: {.solution-block-body}

```{r}
# Solution: Focus on Houses, use proportions, order bars, and center title
region_bar <- 
  housing %>%
  # 1. Filter to only include "House" listings
  filter(type == "House") %>%
  # 2. Create the plot
  ggplot(
    # 2a. Reorder the region names based on frequency
    aes(x = fct_infreq(regionname))
  ) +
  # 3. Plot bar heights as proportions, not raw counts
  geom_bar(
    aes(y = after_stat(count) / sum(after_stat(count))),
    fill = palette_okabe_ito()[2]
  ) +
  # 4. Add informative axis labels and a title
  labs(
    x = "Region", 
    y = "Frequency",  # Note: this is technically a proportion, not % format
    title = "Number of Listings by Region"
  ) +
  # 5. Tweak the theme for better readability and presentation
  theme(
    axis.text.x = element_text(angle = 25, hjust = 1),  # Rotate x labels
    plot.title = element_text(hjust = 0.5)              # Center the title
  )
```


:::

:::

:::
<!-- END PROFILE:r-solutions -->